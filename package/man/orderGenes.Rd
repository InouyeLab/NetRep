% Generated by roxygen2 (4.0.2): do not edit by hand
\name{api_inputs}
\alias{api_inputs}
\alias{orderGenes}
\title{Order genes and modules within a network.}
\usage{
orderGenes(geneExpression = NULL, coexpression, adjacency, moduleAssignments,
  modules, discovery = 1, test = 1)
}
\arguments{
\item{geneExpression}{the gene expression matrix for the dataset of interest,
or a list of gene expression matrices, one for each dataset. Columns are
expected to be genes, rows samples. See details for expected input types.}

\item{coexpression}{the coexpression matrix for the dataset of interest, or a
list of coexpression matrices, one for each dataset. See details for
expected input types.}

\item{adjacency}{the adjacency matrix for the dataset of interest, or a
list of adjacency matrices, one for each dataset. See details for
expected input types.}

\item{moduleAssignments}{a vector assigning genes to modules, or a list of
such vectors. See details.}

\item{modules}{a vector of modules to apply the function to. See details.}

\item{discovery}{name or index denoting which dataset the module of
interest was discovered in. See details.}

\item{test}{name or index denoting which dataset to apply the function to.
See details.}

\item{...}{additional arguments used when reading in a matrix from file. See
 \code{\link{read.bigMatrix}}.}
}
\value{
A vector of ordered gene names (descending order).
}
\description{
Get the ordering of genes by intramodular connectivity and ordering of
modules by the similarity of their summary expression profiles. This function
is used in the \code{\link[=plotNetwork]{plotting functions}} but may also be
useful for other types of downstream analysis: gene connectivity within a
module is strongly correlated with a gene's biological importance to that
module \emph{(1)}.
}
\details{
The matrices containing the \code{geneExpression}, \code{coexpression}, and
 \code{adjacency} should be \code{\link{bigMatrix}} object(s), but the
 function will also work with regular matrices, files containing the matrix
 data, or file paths to the descriptor files for a 'bigMatrix', in which
 case temporary 'bigMatrix' objects will be created. It is advisable to keep
 large matrices stored as 'bigMatrix' objects, as the conversion process
 involves writing out the matrix as binary data to disk. 'bigMatrix' objects
 have the added advantage of having instant load times in new R sessions, and
 can be accessed and used the same way as regular matrices. See
 \code{\link{bigMatrix}} for more details.

 This function can be used in three ways. First, the \code{geneExpression},
 \code{coexpression}, and \code{adjacency} can be provided as lists of
 matrices, where each element corresponds to a dataset of interest. In this
 case, the function will be applied to the \code{test} dataset for the subset
 of genes corresponding to modules discovered in the \code{discovery} dataset.
 By default, the function is applied on dataset 1, on the modules discovered
 in dataset 1. Secondly, the function also accepts single matrices for each,
 simplifying the input for users with only one dataset of interest. Finally,
 \code{modules} and \code{moduleAssignments} may be omitted, in which case
 the function is applied on all genes present in the \code{geneExpression},
 \code{coexpression}, and \code{adjacency}. This may be useful when
 subsetting each matrix by a custom gene set of interest.
}
\examples{
## Example 1: get the ordering of genes for a single module

# First we need some example data
geA <- matrix(rnorm(50*100), ncol=100) # gene expression
colnames(geA) <- paste0("Gene_", 1:100)
rownames(geA) <- paste0("CohortA_", 1:50)
coexpA <- cor(geA) # coexpression
adjA <- abs(coexpA)^5 # adjacency
moduleAssignments <- sample(1:7, size=100, replace=TRUE)
names(moduleAssignments) <- paste0("Gene_", 1:100)

# Create bigMatrix objects for each matrix.
geA <- as.bigMatrix(geA, "geA_bm")
coexpA <- as.bigMatrix(coexpA, "coexpA_bm")
adjA <- as.bigMatrix(adjA, "adjA_bm")

# Get the order of genes in module 2
orderGenes(
  geA, coexpA, adjA, moduleAssignments, modules="2"
)

## Example 2: get the order of genes of an arbitrary subset
## (the first 10 genes)
orderGenes(
 geA[,1:10], coexpA[1:10, 1:10], adjA[1:10, 1:10]
)

## Example 3: get the ordering of genes for two adipose
## tissue modules in the liver tissue of the same samples

geAdipose <- matrix(rnorm(50*100), ncol=100) # gene expression
colnames(geAdipose) <- paste0("Gene_", 1:100)
rownames(geAdipose) <- paste0("Sample_", 1:50)
coexpAdipose <- cor(geAdipose) # coexpression
adjAdipose <- abs(coexpAdipose)^5 # adjacency
adiposeModules <- sample(0:7, size=100, replace=TRUE)
names(adiposeModules) <- paste0("Gene_", 1:100)

geLiver <- matrix(rnorm(50*100), ncol=100) # gene expression
colnames(geLiver) <- paste0("Gene_", 1:100)
rownames(geLiver) <- paste0("Sample_", 1:50)
coexpLiver <- cor(geLiver) # coexpression
adjLiver <- abs(coexpLiver)^6 # adjacency
liverModules <- sample(0:12, size=100, replace=TRUE)
names(liverModules) <- paste0("Gene_", 1:100)

geHeart <- matrix(rnorm(50*100), ncol=100) # gene expression
colnames(geHeart) <- paste0("Gene_", 1:100)
rownames(geHeart) <- paste0("Sample_", 1:50)
coexpHeart <- cor(geHeart) # coexpression
adjHeart <- abs(coexpHeart)^4 # adjacency
heartModules <- sample(0:5, size=100, replace=TRUE)
names(heartModules) <- paste0("Gene_", 1:100)

# Store each input type as a list, where each element corresponds
# to one of the datasets
geneExpression <- list(
  adipose=as.bigMatrix(geAdipose, "geAdipose_bm"),
  liver=as.bigMatrix(geLiver, "geLiver_bm"),
  heart=as.bigMatrix(geHeart, "geHeart_bm")
)
coexpression <- list(
  adipose=as.bigMatrix(coexpAdipose, "coexpAdipose_bm"),
  liver=as.bigMatrix(coexpLiver, "coexpLiver_bm"),
  heart=as.bigMatrix(coexpHeart, "coexpHeart_bm")
)
adjacency <- list(
  adipose=as.bigMatrix(adjAdipose, "adjAdipose_bm"),
  liver=as.bigMatrix(adjLiver, "adjLiver_bm"),
  heart=as.bigMatrix(adjHeart, "adjHeart_bm")
)
moduleAssignments <- list(
  adipose=adiposeModules, liver=liverModules, heart=heartModules
)

# Get the order of genes in the liver tissue for modules
# 3 and 7, which were discovered in the adipose tissue.
orderGenes(
  geneExpression, coexpression, adjacency, moduleAssignments,
  modules=c("3", "7"), discovery="adipose", test="liver"
)

# clean up bigMatrix files from examples
unlink("*_bm*")
}
\references{
\enumerate{
   \item{
     Langfelder, P., Mischel, P. S. & Horvath, S. \emph{When is hub gene
     selection better than standard meta-analysis?} PLoS One \strong{8},
     e61505 (2013).
   }
}
}

