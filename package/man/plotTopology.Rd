% Generated by roxygen2 (4.0.2): do not edit by hand
\name{api_inputs}
\alias{api_inputs}
\alias{plotAdjacency}
\alias{plotAdjacencyLegend}
\alias{plotCoexpression}
\alias{plotCoexpressionLegend}
\alias{plotConnectivity}
\alias{plotExpressionLegend}
\alias{plotModuleMembership}
\title{Plot a topological feature of network module}
\usage{
plotCoexpression(geneExpression = NULL, coexpression, adjacency,
  moduleAssignments, modules, discovery = 1, test = 1, symmetric = FALSE,
  orderBy = "discovery", orderModules, plotGeneNames = TRUE,
  plotModuleNames, main = "Coexpression", palette = coexpression.palette(),
  legend = TRUE)

plotAdjacency(geneExpression = NULL, coexpression, adjacency,
  moduleAssignments, modules, discovery = 1, test = 1, symmetric = FALSE,
  orderBy = "discovery", orderModules, plotGeneNames = TRUE,
  plotModuleNames, main = "Adjacency", palette = adjacency.palette(),
  legend = TRUE)

plotModuleMembership(geneExpression = NULL, coexpression, adjacency,
  moduleAssignments, modules, discovery = 1, test = 1, symmetric = FALSE,
  orderBy = "discovery", orderModules, plotGeneNames = TRUE,
  plotModuleNames, main = "Module Membership", palette = c("#313695",
  "#a50026"), drawBorder = FALSE)

plotConnectivity(geneExpression = NULL, coexpression, adjacency,
  moduleAssignments, modules, discovery = 1, test = 1, symmetric = FALSE,
  orderBy = "discovery", orderModules = TRUE, plotGeneNames = TRUE,
  plotModuleNames, main = "Normalised Connectivity", palette = "#feb24c",
  drawBorder = FALSE)

plotExpressionLegend(geneExpression, coexpression, adjacency, moduleAssignments,
  modules, discovery = 1, test = 1, palette = expression.palette(),
  main = "Expression", horizontal = TRUE)

plotCoexpressionLegend(palette = coexpression.palette(),
  main = "Coexpression", horizontal = TRUE)

plotAdjacencyLegend(palette = adjacency.palette(), main = "Adjacency",
  horizontal = TRUE)
}
\arguments{
\item{geneExpression}{the gene expression matrix for the dataset of interest,
or a list of gene expression matrices, one for each dataset. Columns are
expected to be genes, rows samples. See details for expected input types.}

\item{coexpression}{the coexpression matrix for the dataset of interest, or a
list of coexpression matrices, one for each dataset. See details for
expected input types.}

\item{adjacency}{the adjacency matrix for the dataset of interest, or a
list of adjacency matrices, one for each dataset. See details for
expected input types.}

\item{moduleAssignments}{a vector assigning genes to modules, or a list of
such vectors. See details.}

\item{modules}{a vector of modules to apply the function to. See details.}

\item{discovery}{name or index denoting which dataset the module of
interest was discovered in. See details.}

\item{test}{name or index denoting which dataset to apply the function to.
 See details.}

\item{orderBy}{one of "discovery", "test", or "none". If "discovery" genes
are ordered by intramodular connectivity in the \code{discovery} dataset
(see \code{\link{geneOrder}}) and samples are ordered by their summary
expression profile in the \code{discovery} dataset (see
\code{\link{sampleOrder}}). If "test" genes are orderd by intramodular
connectivity and samples are ordered by their summary expression profile in
the \code{test} dataset. If "none" no ordering is applied.}

\item{orderModules}{logical; if \code{TRUE} modules ordered by similarity.
If \code{FALSE} modules are rendered in the order provided. The default is
to order by modules if the gene expression is provided.}

\item{plotGeneNames}{logical; if \code{TRUE}, plot the gene names below the
heatmap.}

\item{plotModuleNames}{logical; if \code{TRUE}, plot the module names below
the heatmap. By default, module names are only plotted if multiple
\code{modules} are provided.}

\item{main}{title for the plot.}

\item{palette}{a vector of colors to interpolate over when plotting the
coexpression. The first element should correspond to the color
used when the coexpression between two genes is equal to -1, and the last
element should correspond to the color used when the coexpression between
two genes is equal to 1}

\item{legend}{logical; if \code{TRUE} legends are drawn for
 \code{plotCoexpression}, \code{plotAdjacency}, or \code{plotExpression}.}

\item{symmetric}{logical; if \code{TRUE} the coexpression will be plotted as
a symmetric heatmap, if \code{FALSE} it will be plotted as a triangular
heatmap.}

\item{drawBorder}{logical; if \code{TRUE}, borders are drawn around the bars
in \code{plotModuleMembership}, \code{plotConnectivity}, or
\code{plotSummaryExpression}.}

\item{horizontal}{logical; if \code{TRUE} the legend is plotted horizontally.}
}
\description{
Functions to plot individual components of a module's network topology.
}
\details{
The matrices containing the \code{geneExpression}, \code{coexpression}, and
 \code{adjacency} should be \code{\link{bigMatrix}} object(s), but the
 function will also work with regular matrices, files containing the matrix
 data, or file paths to the descriptor files for a 'bigMatrix', in which
 case temporary 'bigMatrix' objects will be created. It is advisable to keep
 large matrices stored as 'bigMatrix' objects, as the conversion process
 involves writing out the matrix as binary data to disk. 'bigMatrix' objects
 have the added advantage of having instant load times in new R sessions, and
 can be accessed and used the same way as regular matrices. See
 \code{\link{bigMatrix}} for more details.

 This function can be used in three ways. First, the \code{geneExpression},
 \code{coexpression}, and \code{adjacency} can be provided as lists of
 matrices, where each element corresponds to a dataset of interest. In this
 case, the function will be applied to the \code{test} dataset for the subset
 of genes corresponding to modules discovered in the \code{discovery} dataset.
 By default, the function is applied on dataset 1, on the modules discovered
 in dataset 1. Secondly, the function also accepts single matrices for each,
 simplifying the input for users with only one dataset of interest. Finally,
 \code{modules} and \code{moduleAssignments} may be omitted, in which case
 the function is applied on all genes present in the \code{geneExpression},
 \code{coexpression}, and \code{adjacency}. This may be useful when
 subsetting each matrix by a custom gene set of interest.
}
\examples{
\dontrun{
## Example 1: Plot coexpression of a single module

# First we need some example data
geA <- matrix(rnorm(50*100), ncol=100) # gene expression
colnames(geA) <- paste0("Gene_", 1:100)
rownames(geA) <- paste0("CohortA_", 1:50)
coexpA <- cor(geA) # coexpression
adjA <- abs(coexpA)^5 # adjacency
moduleAssignments <- sample(1:7, size=100, replace=TRUE)
names(moduleAssignments) <- paste0("Gene_", 1:100)

# Create bigMatrix objects for each matrix.
geA <- as.bigMatrix(geA, "geA_bm")
coexpA <- as.bigMatrix(coexpA, "coexpA_bm")
adjA <- as.bigMatrix(adjA, "adjA_bm")

# Plot coexpression of module 2
plotCoexpression(
  geA, coexpA, adjA, moduleAssignments, modules="2"
)

## Example 2: Plot coexpression of the first 10 genes,
## without ordering them
plotCoexpression(
 geA[,1:10], coexpA[1:10, 1:10], adjA[1:10, 1:10], orderBy="none"
)

## Example 3: Plot the coexpression of two adipose modules in the liver
## dataset

geAdipose <- matrix(rnorm(50*100), ncol=100) # gene expression
colnames(geAdipose) <- paste0("Gene_", 1:100)
rownames(geAdipose) <- paste0("Sample_", 1:50)
coexpAdipose <- cor(geAdipose) # coexpression
adjAdipose <- abs(coexpAdipose)^5 # adjacency
adiposeModules <- sample(0:7, size=100, replace=TRUE)
names(adiposeModules) <- paste0("Gene_", 1:100)

geLiver <- matrix(rnorm(50*100), ncol=100) # gene expression
colnames(geLiver) <- paste0("Gene_", 1:100)
rownames(geLiver) <- paste0("Sample_", 1:50)
coexpLiver <- cor(geLiver) # coexpression
adjLiver <- abs(coexpLiver)^6 # adjacency
liverModules <- sample(0:12, size=100, replace=TRUE)
names(liverModules) <- paste0("Gene_", 1:100)

geHeart <- matrix(rnorm(50*100), ncol=100) # gene expression
colnames(geHeart) <- paste0("Gene_", 1:100)
rownames(geHeart) <- paste0("Sample_", 1:50)
coexpHeart <- cor(geHeart) # coexpression
adjHeart <- abs(coexpHeart)^4 # adjacency
heartModules <- sample(0:5, size=100, replace=TRUE)
names(heartModules) <- paste0("Gene_", 1:100)

# Store each input type as a list, where each element corresponds
# to one of the datasets
geneExpression <- list(
  adipose=as.bigMatrix(geAdipose, "geAdipose_bm"),
  liver=as.bigMatrix(geLiver, "geLiver_bm"),
  heart=as.bigMatrix(geHeart, "geHeart_bm")
)
coexpression <- list(
  adipose=as.bigMatrix(coexpAdipose, "coexpAdipose_bm"),
  liver=as.bigMatrix(coexpLiver, "coexpLiver_bm"),
  heart=as.bigMatrix(coexpHeart, "coexpHeart_bm")
)
adjacency <- list(
  adipose=as.bigMatrix(adjAdipose, "adjAdipose_bm"),
  liver=as.bigMatrix(adjLiver, "adjLiver_bm"),
  heart=as.bigMatrix(adjHeart, "adjHeart_bm")
)
moduleAssignments <- list(
  adipose=adiposeModules, liver=liverModules, heart=heartModules
)

# Plot coexpression for adipose modules 3 and 7 in the heart tissue.
plotCoexpression(
  geneExpression, coexpression, adjacency, moduleAssignments,
  modules=c("3", "7"), discovery="adipose", test="heart",
  main="Heart", plotGeneNames=FALSE
)

# clean up bigMatrix files from examples
unlink("*_bm*")
}
}

