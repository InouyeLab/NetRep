% Generated by roxygen2 (4.0.2): do not edit by hand
\name{module-preservation-stats}
\alias{calcSharedTestStats}
\alias{calcSplitTestStats}
\alias{calcStats}
\alias{module-preservation-stats}
\alias{moduleProps}
\title{Calculate module preservation statistics}
\usage{
moduleProps(adj, moduleIndices, sge = NULL, lowmem = FALSE)

calcSplitTestStats(discProps, testProps)

calcSharedTestStats(discCoexp, discIndices, testCoexp, testIndices, lowmem)

calcStats(discProps, testProps, discCoexp, discIndices, testCoexp, testIndices,
  lowmem)
}
\arguments{
\item{adj}{a matrix (see Inputs section) of pairwise gene adjacencies.}

\item{moduleIndices}{indices for the network module of interest in the
  supplied data matrix.}

\item{sge}{a matrix (see Inputs section) of gene expression data. Assumes
 columns are genes/probes, rows are samples, and that probes have been scaled
 (This can be done using \code{\link{scaleBigMatrix}}).}

\item{lowmem}{logical; See the Minimising Memory Usage}

\item{discProps}{properties of the network module in the \emph{discovery}
dataset (calculated by \code{moduleProps}).}

\item{testProps}{properties of the network module in the \emph{test} dataset
 (calculated by \code{moduleProps}).}

\item{discCoexp}{a matrix (see Inputs section) of the pairwise coexpression
for the \emph{discovery} dataset.}

\item{discIndices}{indices corresponding to the network module in the matrix
of pairwise-coexpression in the \emph{discovery} dataset.}

\item{testCoexp}{a matrix (see Inputs section) of the pairwise coexpression
for the \emph{test} dataset.}

\item{testIndices}{indices corresponding to the network module, or a random
  sample of the same size, in the matrix of pairwise-coexpression in the
  \emph{test} dataset.}
}
\value{
\code{moduleProps}: A list containing the following network properties:
 \enumerate{
   \item{\emph{"kIM"}}:{
     A vector whose entries contain the intramodular connectivity for each
     gene in the module.
   }
   \item{\emph{"mean.adj"}}:{
     The density of the module: the average pairwise-gene adjacency.
   }
   \item{\emph{"SEP"}}:{
     A numeric vector denoting the summary expression profile for the module.
   }
   \item{\emph{"MM"}}:{
     A vector whose entries contain the module membership for each gene; the
     correlation between each gene and the summary expression profile.
   }
   \item{\emph{"pve"}}:{
     The proportion of variance explained in the module's underlying gene
     expression by the summary expression profile.
   }
 }

\code{calcSplitTestStats}: A vector containing the \emph{mean.adj}, and
 \emph{cor.kIM}, as well as the \code{pve}, \code{mean.MM}, and \code{cor.MM}
 if gene expression data has been supplied when calculating \code{testProps}
 and \code{discProps}.

\code{calcSharedTestStats}: A vector of containing the \emph{cor.coexp} and
 \emph{mean.coexp} statistics for the specified module.

\code{calcStats}: a vector containing the values for all the module
 preservation statistics: \emph{mean.adj}, \emph{cor.kIM}, \emph{pve},
 \emph{mean.MM}, \emph{cor.MM}, \emph{cor.coexp}, and \emph{mean.coexp}.
}
\description{
A set of functions for calculating the module preservation statistics, and
 their underlying network properties, for a single module.

\code{moduleProps}: calculate a module's network properties.

\code{calcSplitTestStats}: calculate the module preservation statistics
 from two lists of network properties obtained from \code{moduleProps}.

\code{calcSharedTestStats}: calculate remaining module preservation
  statistics for which network properties have not been calculated in
  advance.

\code{calcStats}: interface function that calls \code{calcSplitTestStats}
 and \code{calcSharedTestStats} and combines their results into a single
 vector.
}
\details{
\code{moduleProps}: providing gene expression data is optional. If not
 provided, only the \emph{kIM} and \emph{mean.adj} are calculated.
}
\section{Design Rationale}{

 Most of the module presevation statistics are calculated as the correlation
 of some network properties across the \emph{discovery} and \emph{test}
 datasets. The permutation procedure randomly samples from the \emph{test}
 dataset, so it therefore makes sense to calculate the network properties in
 the \emph{discovery} dataset once.

 The code is thus split into calculations of the network properties, and then
 calculating the statistics from these. The ability to calculate the network
 properties is also useful for downstream analysis.

 The exceptions to this design are the coexpression based statistics. The
 \emph{cor.coexp} and \emph{mean.coexp} require all entries of the pairwise
 coexpression matrix for the module. As modules can be quite large (e.g.,
 10,000 probes), this would be prohibitive to pass around in memory.
}

\section{Warning}{

  No sanity checking of the inputs is performed by these functions. This is
  to enhance speed, and is why these interfaces are not exported as part of
  the package namespace. If you are going to use these wrappers anyway, you
  should read the instructions in the Details section.
}

\section{Inputs}{

  The expected object type for the input matrices depends on the value of
  \code{lowmem}. When \code{lowmem} is \code{FALSE}, they are expected to be
  objects of type \code{\link[bigmemory]{big.matrix}}. When \code{TRUE}, they
  are expected to be file paths pointing to descriptor files for the
  corresponding \code{\link[bigmemory]{big.matrix}} object.

  The \code{discIndices} and \code{testIndices} arguments are expected to be
  integer vectors. If they contain missing values (\code{NA}) then C++
  will segfault, crashing your R session and potentionally losing all your
  data.
}

\section{Minimising Memory Usage}{

  When \code{lowmem} is set to \code{TRUE}, these functions will detach the
  \code{\link[bigmemory]{big.matrix}} objects after performing the
  calculations, and invoke R's garbage collector, forcibly clearing the
  virtual memory.
}
\references{
\enumerate{
    \item{
      Langfelder, P., Luo, R., Oldham, M. C. & Horvath, S. \emph{Is my
      network module preserved and reproducible?} PLoS Comput. Biol.
      \strong{7}, e1001057 (2011).
    }
 }
}

