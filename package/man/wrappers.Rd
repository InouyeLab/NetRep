% Generated by roxygen2 (4.0.1): do not edit by hand
\name{wrappers}
\alias{dataProps}
\alias{netProps}
\alias{netStats}
\alias{wrappers}
\title{Wrapper functions for Rcpp functions}
\usage{
netStats(discAdj, discIndices, testAdj, testIndices)

netProps(adj, subsetIndices)

dataProps(dat, scaledDat, datIndices)
}
\arguments{
\item{discAdj,testAdj,adj}{\code{\link[bigmemory]{big.matrix}} objects
containing the adjacency matrices for the \emph{discovery} and \emph{test}
networks respectively.}

\item{discIndices,testIndices,subsetIndices}{indices for the network subset
of interest in the adjacency matrices for the \emph{discovery} and
\emph{test} and networks respectively.}

\item{datIndices}{indices for the network subset of interest in the
underlying data provided for \code{\link{DataProps}}.}

\item{dat}{underlying data the adjacency matrix was constructed from}

\item{scaledDat}{a row scaled \code{big.matrix} version of \code{dat}.
 See \code{\link{scaleBigMatrix}}.}
}
\value{
\code{netStats:} a list of statistics calculated between adjacency
 matrices for a \emph{discovery} and \emph{test} network.

\code{netProps:} a list of network properties calculated from an
 adjacency matrix. These properties can either be scalers (summarising the
 whole network subset), or vectors (characterising some property for each
 node in the network subset).

a list of properties quantifying the relationship between a network
  subset and the underlying data the adjacency matrix was calculated from.
  These properties can either be scalers (summarising the whole network
  subset), or vectors (characterising some property for each node in the
  network subset).
}
\description{
These functions abstract away the calls to the Rcpp implementations of
\code{\link{NetStats}}, \code{\link{NetProps}}, and \code{\link{dataProps}}.
There are two reasons why this is convenient:
\enumerate{
 \item{
   \code{\link[bigmemory]{big.matrix}} objects can now be passed directly
   without calling their \code{@address} slot.
 }
 \item{
   The returned armadillo types are all matrices, even though all the results
   returned are in vector or scalar format, so we can transform the results
   in R, to avoid risk of memory leaks from incorrect Armadillo to Rcpp
   casting on my own part.
 }
}
}

